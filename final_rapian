import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;

import java.awt.GridLayout;

import com.jgoodies.forms.layout.FormLayout;
import com.jgoodies.forms.layout.ColumnSpec;
import com.jgoodies.forms.layout.RowSpec;

import javax.swing.BoxLayout;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.SwingConstants;

import java.awt.Font;

import javax.swing.JButton;
import javax.swing.JSplitPane;
import javax.swing.border.BevelBorder;
import javax.swing.filechooser.FileNameExtensionFilter;

import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;

import com.jgoodies.forms.factories.DefaultComponentFactory;

import javax.swing.JTextPane;
import com.jgoodies.forms.factories.FormFactory;
import javax.swing.JTextField;


public class DESGUIBuilder extends JFrame {

	/**
	 * Launch the application.
	 */
	
	JFileChooser chooser = new JFileChooser();
	private JTextField textField;
	JTextPane txtpnFileChoosen = new JTextPane();
	JTextPane txtpnKeyFile = new JTextPane();
	
	private String directory;
	private String fileIn;
	private String fileKey;
	
	final static int[] SBox = {
		14,  4, 13,  1,  2, 15, 11,  8,  3, 10,  6, 12,  5,  9,  0,  7, // S1
		 0, 15,  7,  4, 14,  2, 13,  1, 10,  6, 12, 11,  9,  5,  3,  8,
		 4,  1, 14,  8, 13,  6,  2, 11, 15, 12,  9,  7,  3, 10,  5,  0,
		15, 12,  8,  2,  4,  9,  1,  7,  5, 11,  3, 14, 10,  0,  6, 13,
		15,  1,  8, 14,  6, 11,  3,  4,  9,  7,  2, 13, 12,  0,  5, 10, // S2
		 3, 13,  4,  7, 15,  2,  8, 14, 12,  0,  1, 10,  6,  9, 11,  5,
		 0, 14,  7, 11, 10,  4, 13,  1,  5,  8, 12,  6,  9,  3,  2, 15,
		13,  8, 10,  1,  3, 15,  4,  2, 11,  6,  7, 12,  0,  5, 14,  9,
		10,  0,  9, 14,  6,  3, 15,  5,  1, 13, 12,  7, 11,  4,  2,  8, // S3
		13,  7,  0,  9,  3,  4,  6, 10,  2,  8,  5, 14, 12, 11, 15,  1,
		13,  6,  4,  9,  8, 15,  3,  0, 11,  1,  2, 12,  5, 10, 14,  7,
		 1, 10, 13,  0,  6,  9,  8,  7,  4, 15, 14,  3, 11,  5,  2, 12,
		 7, 13, 14,  3,  0,  6,  9, 10,  1,  2,  8,  5, 11, 12,  4, 15, // S4
		13,  8, 11,  5,  6, 15,  0,  3,  4,  7,  2, 12,  1, 10, 14,  9,
		10,  6,  9,  0, 12, 11,  7, 13, 15,  1,  3, 14,  5,  2,  8,  4,
		 3, 15,  0,  6, 10,  1, 13,  8,  9,  4,  5, 11, 12,  7,  2, 14,
		 2, 12,  4,  1,  7, 10, 11,  6,  8,  5,  3, 15, 13,  0, 14,  9, // S5
		14, 11,  2, 12,  4,  7, 13,  1,  5,  0, 15, 10,  3,  9,  8,  6,
		 4,  2,  1, 11, 10, 13,  7,  8, 15,  9, 12,  5,  6,  3,  0, 14,
		11,  8, 12,  7,  1, 14,  2, 13,  6, 15,  0,  9, 10,  4,  5,  3,
		12,  1, 10, 15,  9,  2,  6,  8,  0, 13,  3,  4, 14,  7,  5, 11, // S6
		10, 15,  4,  2,  7, 12,  9,  5,  6,  1, 13, 14,  0, 11,  3,  8,
		 9, 14, 15,  5,  2,  8, 12,  3,  7,  0,  4, 10,  1, 13, 11,  6,
		 4,  3,  2, 12,  9,  5, 15, 10, 11, 14,  1,  7,  6,  0,  8, 13,
		 4, 11,  2, 14, 15,  0,  8, 13,  3, 12,  9,  7,  5, 10,  6,  1, // S7
		13,  0, 11,  7,  4,  9,  1, 10, 14,  3,  5, 12,  2, 15,  8,  6,
		 1,  4, 11, 13, 12,  3,  7, 14, 10, 15,  6,  8,  0,  5,  9,  2,
		 6, 11, 13,  8,  1,  4, 10,  7,  9,  5,  0, 15, 14,  2,  3, 12,
		13,  2,  8,  4,  6, 15, 11,  1, 10,  9,  3, 14,  5,  0, 12,  7, // S8
		 1, 15, 13,  8, 10,  3,  7,  4, 12,  5,  6, 11,  0, 14,  9,  2,
		 7, 11,  4,  1,  9, 12, 14,  2,  0,  6, 10, 13, 15,  3,  5,  8,
		 2,  1, 14,  7,  4, 10,  8, 13, 15, 12,  9,  0,  3,  5,  6, 11
	};
	
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					DESGUIBuilder frame = new DESGUIBuilder();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public DESGUIBuilder() {
		setTitle("Tugas 1 CIS");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 450, 321);
		
		JPanel panel = new JPanel();
		getContentPane().add(panel, BorderLayout.NORTH);
		panel.setLayout(new GridLayout(0, 1, 0, 0));
		
		JPanel panel_5 = new JPanel();
		panel.add(panel_5);
		
		JLabel lblDesCipher = new JLabel("DES Cipher");
		panel_5.add(lblDesCipher);
		lblDesCipher.setVerticalAlignment(SwingConstants.CENTER);
		lblDesCipher.setHorizontalAlignment(SwingConstants.CENTER);
		lblDesCipher.setEnabled(true);
		lblDesCipher.setFont(new Font("Tahoma", Font.BOLD, 18));
		
		JPanel panel_1 = new JPanel();
		panel.add(panel_1);
		panel_1.setLayout(new FormLayout(new ColumnSpec[] {
				ColumnSpec.decode("217px"),
				ColumnSpec.decode("217px"),},
			new RowSpec[] {
				RowSpec.decode("30px"),}));
		
		JLabel lblInputFile = new JLabel("Input File");
		lblInputFile.setFont(new Font("Tahoma", Font.BOLD, 12));
		lblInputFile.setHorizontalAlignment(SwingConstants.CENTER);
		panel_1.add(lblInputFile, "1, 1, fill, fill");
		
		JButton btnChooseFile = new JButton("Choose File");
		panel_1.add(btnChooseFile, "2, 1, fill, fill");
		btnChooseFile.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				JFileChooser chooser = new JFileChooser();
			    FileNameExtensionFilter filter = new FileNameExtensionFilter(
			        "Text", "txt");
			    chooser.setFileFilter(filter);
			    int returnVal = chooser.showOpenDialog(chooser);
			    if(returnVal == JFileChooser.APPROVE_OPTION) {
			    	directory = chooser.getCurrentDirectory() + "\\";
			       	fileIn = directory + chooser.getSelectedFile().getName();
			       	txtpnFileChoosen.setText("File Choosen: " + fileIn);
			    }
			}
		});
		
		JPanel panel_3 = new JPanel();
		panel.add(panel_3);
		panel_3.setLayout(new FormLayout(new ColumnSpec[] {
				ColumnSpec.decode("434px"),},
			new RowSpec[] {
				FormFactory.DEFAULT_ROWSPEC,}));
		
		
		txtpnFileChoosen.setEditable(false);
		txtpnFileChoosen.setText("File Choosen:");
		panel_3.add(txtpnFileChoosen, "1, 1, fill, fill");
		
		JPanel panel_4 = new JPanel();
		panel.add(panel_4);
		panel_4.setLayout(new FormLayout(new ColumnSpec[] {
				ColumnSpec.decode("217px"),
				ColumnSpec.decode("217px:grow"),},
			new RowSpec[] {
				RowSpec.decode("30px"),}));
		
		JLabel lblKeyFiletxt = new JLabel("Key File (.txt)");
		lblKeyFiletxt.setFont(new Font("Tahoma", Font.BOLD, 11));
		panel_4.add(lblKeyFiletxt, "1, 1, center, center");
		
		JButton btnChooseFile_1 = new JButton("Choose File");
		panel_4.add(btnChooseFile_1, "2, 1, fill, fill");
		btnChooseFile_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				JFileChooser chooser = new JFileChooser();
			    FileNameExtensionFilter filter = new FileNameExtensionFilter(
			        "Text", "txt");
			    chooser.setFileFilter(filter);
			    int returnVal = chooser.showOpenDialog(chooser);
			    if(returnVal == JFileChooser.APPROVE_OPTION) {
			       	fileKey = chooser.getCurrentDirectory() + "\\" + chooser.getSelectedFile().getName();
			       	txtpnKeyFile.setText("Key File: " + fileKey);
			    }
			}
		});
		
		JPanel panel_6 = new JPanel();
		panel.add(panel_6);
		panel_6.setLayout(new FormLayout(new ColumnSpec[] {
				ColumnSpec.decode("center:default:grow"),},
			new RowSpec[] {
				RowSpec.decode("default:grow"),}));
		
		
		txtpnKeyFile.setEditable(false);
		txtpnKeyFile.setText("Key File:");
		panel_6.add(txtpnKeyFile, "1, 1, fill, fill");
		
		JPanel panel_2 = new JPanel();
		getContentPane().add(panel_2, BorderLayout.CENTER);
		panel_2.setLayout(new FormLayout(new ColumnSpec[] {
				ColumnSpec.decode("217px:grow"),
				ColumnSpec.decode("217px:grow"),},
			new RowSpec[] {
				RowSpec.decode("30px"),
				RowSpec.decode("50px"),
				RowSpec.decode("default:grow"),}));
		
		JLabel lblYourDesiredResult = new JLabel("Your Desired Result File Name");
		panel_2.add(lblYourDesiredResult, "1, 1, left, center");
		
		textField = new JTextField();
		panel_2.add(textField, "2, 1, fill, default");
		textField.setColumns(10);
		
		JButton btnEncrypt = new JButton("Encrypt");
		btnEncrypt.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				utama(fileIn, fileKey, directory + textField.getText(), 0);
			}
		});
		panel_2.add(btnEncrypt, "1, 2, fill, fill");
		
		JButton btnDecrypt = new JButton("Decrypt");
		btnDecrypt.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				utama(fileIn, fileKey, directory + textField.getText(), 1);
			}
		});
		panel_2.add(btnDecrypt, "2, 2, fill, fill");
		
		JTextPane txtpnTheResultFile = new JTextPane();
		txtpnTheResultFile.setEditable(false);
		txtpnTheResultFile.setText("The result file will be saved in the same directory as the input file.");
		panel_2.add(txtpnTheResultFile, "1, 3, center, center");
		
		JTextPane txtpnNefriSuswita = new JTextPane();
		txtpnNefriSuswita.setEditable(false);
		txtpnNefriSuswita.setText("Nefri Suswita\nDhika Ayu Agustin Cahyani");
		panel_2.add(txtpnNefriSuswita, "2, 3, fill, fill");
		
		String dir = System.getProperty("user.dir");
		chooser.setCurrentDirectory(new File(dir));
		
		
	}
	
	public static void utama(String input, String fileKey, String output, int status){
		File file = new File(input);
		byte[] data = new byte[(int) file.length()];
		FileInputStream in = new FileInputStream(file);
		in.read(data);
		in.close();		
		
		File out = new File(output);
		FileOutputStream fileOutput = new FileOutputStream(out);
				
		//read key
		BufferedReader rd = new BufferedReader(new FileReader (fileKey));
		int i = 0;
		String hexKey = rd.readLine();
		boolean[] kunci = new boolean[64];
		while(i < hexKey.length()){
			key(kunci, hexKey.charAt(i), i*4);
			i++;
		}
		boolean[][] key = generateKey(kunci);
		
		if(status==0)
			enkripsi(data, key, fileOutput);
		else
			dekripsi(data, key, fileOutput);
	}
	
	public static void dekripsi(byte[] data, boolean[][] key, FileOutputStream fileOutput) throws IOException{
		int jmlPadding = (int) data[data.length-1];
		
		if(jmlPadding!=0)
			jmlPadding= 8-jmlPadding;
		
		byte[] temp = new byte[data.length-1];
		for(int i=0; i<temp.length; i++){
			temp[i]=data[i];
		}
		proses(temp, 1, key, fileOutput, jmlPadding);
		
	}
	
	public static void enkripsi(byte[] data, boolean[][] key, FileOutputStream fileOutput) throws IOException{
		int ceil = (int) Math.ceil(data.length/8.0);
		byte[] withPadding = new byte[ceil*8];
		System.arraycopy(data, 0, withPadding, 0, data.length);
		
		int jumlahPadding=(data.length%8);
		
		proses(withPadding, 0, key, fileOutput, 0);
		
		fileOutput.write((byte) jumlahPadding);
		fileOutput.close();
	}
	
	public static void proses (byte[] withPadding, int status, boolean[][] key, FileOutputStream fileOutput, int padding) throws IOException{
		for(int j=0; j<withPadding.length; j+=8){
			byte[] getByte = new byte[8];
			for(int y=0; y<8; y++){
				getByte[y]=withPadding[j+y];
			}

			boolean[] temp = byteToABool(getByte);
			
		int[] ip = {58, 50, 42, 34, 26, 18, 10, 2,
				60, 52, 44, 36, 28, 20, 12, 4,
				62, 54, 46, 38, 30, 22, 14, 6,
				64, 56, 48, 40, 32, 24, 16, 8,
				57, 49, 41, 33, 25, 17, 9, 1,
				59, 51, 43, 35, 27, 19, 11, 3,
				61, 53, 45, 37, 29, 21, 13, 5,
				63, 55, 47, 39, 31, 23, 15, 7};
	
		//initial permuatation
		boolean[] hasilIP = hasilTable(temp, ip);
		
		boolean[] rn = new boolean[32];
		boolean[] ln = new boolean[32];
		
		for (int i=0; i<32; i++) {
			ln[i] = hasilIP[i];
			rn[i] = hasilIP[i+32];
		}
		
		for(int i=0; i<16; i++) {
			//expansion permutation input
			int[] exp = {32, 1, 2, 3, 4, 5,
						4, 5, 6, 7, 8, 9,
						8, 9, 10, 11, 12, 13,
						12, 13, 14, 15, 16, 17,
						16, 17, 18, 19, 20, 21,
						20, 21, 22, 23, 24, 25,
						24, 25, 26, 27, 28, 29,
						28, 29, 30, 31, 32, 1};
			
			boolean[] hasilExp = hasilTable(rn, exp);
			
			if(status == 0)
				hasilExp = hasilXor(hasilExp, key[i]);
			else
				hasilExp = hasilXor(hasilExp, key[15-i]);
			
			//permutation function
			boolean[] hasilSub = getSBoxSub(hasilExp);
			
			int[] pf = {16, 7, 20, 21, 29, 12, 28, 17,
						1, 15, 23, 26, 5, 18, 31, 10,
						2, 8, 24, 14, 32, 27, 3, 9,
						19, 13, 30, 6, 22, 11, 4, 25};
			
			boolean[] hasilpf = hasilTable(hasilSub, pf);
			hasilpf=hasilXor(hasilpf,ln);
			
			System.arraycopy(rn, 0, ln, 0, rn.length);
			rn=hasilpf;
		}
			boolean[] fin = new boolean[64];
			
			System.arraycopy(rn, 0, fin, 0, rn.length);
			System.arraycopy(ln, 0, fin, rn.length, ln.length);
			
			int [] ipMin = {40, 8, 48, 16, 56, 24, 64, 32,
					39, 7, 47, 15, 55, 23, 63, 31,
					38, 6, 46, 14, 54, 22, 62, 30,
					37, 5, 45, 13, 53, 21, 61, 29,
					36, 4, 44, 12, 52, 20, 60, 28,
					35, 3, 43, 11, 51, 19, 59, 27,
					34, 2, 42, 10, 50, 18, 58, 26,
					33, 1, 41, 9, 49, 17, 57, 25};
	
			fin = hasilTable(fin, ipMin);//hasil akhir
			
			//kalo udah 64 bit terakhir
			String hasil = toString(fin);
			
			int k = 0;
			if(padding!=0 && (j>=withPadding.length-8))
				k=padding;
			
			for(int w=0; w<64-(k*8); w+=8){
				byte temp1 = (byte) Integer.parseInt(hasil.substring(w,w+8),2);
				fileOutput.write(temp1);
			}
			
		}
			
	}
	
	public static boolean[] hasilTable(boolean[] a, int[]b){
		boolean[] hasil = new boolean[b.length];
		for (int i=0; i<b.length; i++){
			hasil[i]=a[b[i]-1];
		}
		return hasil;
	}
	
	public static boolean[] hasilXor(boolean[]a, boolean[]b) {
		boolean[] temp = new boolean[a.length];
		for (int i=0; i<a.length; i++) {
			temp[i]= (a[i] ^ b[i]);
		} return temp;
	}
	
	public static boolean[] hasilShift(boolean[] a, int b) {
		boolean[] temp = new boolean[a.length];
		for(int i=0; i<a.length; i++){
			temp[i]=a[(i+b+a.length)%a.length];
		} return temp;
	}
	
	public static boolean[] byteToABool(byte[] a){
		boolean[] b = new boolean[64];
		for(int i=0; i < 8; i++) {
			for(int j = 0; j < 8; j++){
				b[(i*8)+(7-j)] = (a[i] & (1 << j)) == 0 ? false : true;
			}
		} return b;
	}
	
	//buat convert key ke boolean[]
	public static boolean[] key(boolean[] a, char b, int c){
		switch(Character.toUpperCase(b)) {
			case '0':
		        a[c]=false; a[c+1]=false; a[c+2]=false; a[c+3]=false;
		        break;
		    case '1':
		    	 a[c]=false; a[c+1]=false; a[c+2]=false; a[c+3]=true;
		        break;
		    case '2':
		    	a[c]=false; a[c+1]=false; a[c+2]=true; a[c+3]=false;
		    	break;
		    case '3':
		    	a[c]=false; a[c+1]=false; a[c+2]=true; a[c+3]=true;
		    	break;
		    case '4':
		    	a[c]=false; a[c+1]=true; a[c+2]=false; a[c+3]=false;
		    	break;
		    case '5':
		    	a[c]=false; a[c+1]=true; a[c+2]=false; a[c+3]=true;
		    	break;
		    case '6':
		    	a[c]=false; a[c+1]=true; a[c+2]=true; a[c+3]=false;
		    	break;
		    case '7':
		    	a[c]=false; a[c+1]=true; a[c+2]=true; a[c+3]=true;
		    	break;
		    case '8':
		    	a[c]=true; a[c+1]=false; a[c+2]=false; a[c+3]=false;
		    	break;
		    case '9':
		    	a[c]=true; a[c+1]=false; a[c+2]=false; a[c+3]=true;
		    	break;
		    case 'A':
		    	a[c]=true; a[c+1]=false; a[c+2]=true; a[c+3]=false;
		    	break;
		    case 'B':
		    	a[c]=true; a[c+1]=false; a[c+2]=true; a[c+3]=true;
		    	break;
		    case 'C':
		    	a[c]=true; a[c+1]=true; a[c+2]=false; a[c+3]=false;
		    	break;
		    case 'D':
		    	a[c]=true; a[c+1]=true; a[c+2]=false; a[c+3]=true;
		    	break;
		    case 'E':
		    	a[c]=true; a[c+1]=true; a[c+2]=true; a[c+3]=false;
		    	break;
		    case 'F':
		    	a[c]=true; a[c+1]=true; a[c+2]=true; a[c+3]=true;
		    	break;
		    default:
		    	System.out.println("kunci salah");
		    	System.exit(0);
		} return a;
	}
	
	public static boolean[][] generateKey(boolean[] tempKey){
		boolean[][] key = new boolean[16][48];
		//key
		int[] pcol = {57, 49, 41, 33, 25, 17, 9,
						1, 58, 50, 42, 34, 26, 18,
						10, 2, 59, 51, 43, 35, 27,
						19, 11, 3, 60, 52, 44, 36};
		
		boolean[] pcoLeft = hasilTable(tempKey, pcol);
		
		int[] pcor = {63, 55, 47, 39, 31, 23, 15,
						7, 62, 54, 46, 38, 30, 22,
						14, 6, 61, 53, 45, 37, 29,
						21, 13, 5, 28, 20, 12, 4};
		
		boolean[] pcoRight = hasilTable(tempKey, pcor);
		
		int[] schedule = {1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1};
		
		for(int i=0;i<16;i++){
			pcoLeft = hasilShift(pcoLeft, schedule[i]);
			pcoRight = hasilShift(pcoRight, schedule[i]);
			
			int[] pc2 = {14, 17, 11, 24, 1, 5, 3, 28,
						15, 6, 21, 10, 23, 19, 12, 4,
						26, 8, 16, 7, 27, 20, 13, 2,
						41, 52, 31, 37, 47, 55, 30, 40,
						51, 45, 33, 48, 44, 49, 39, 56,
						34, 53, 46, 42, 50, 36, 29, 32};
			
			boolean[] pct = new boolean[pcoLeft.length + pcoRight.length];
			
			System.arraycopy(pcoLeft, 0, pct, 0, pcoLeft.length);
			System.arraycopy(pcoRight, 0, pct, pcoLeft.length, pcoRight.length);
			
			pct = hasilTable(pct, pc2);
			key[i] = pct.clone();
		} return key;
	}
	
	public static boolean[] getSBoxSub(boolean[] in){ //panjang in = 48bit
		boolean[] everySix = new boolean[6];
		int sub = 0;
		String preResult = "";
		String tempResult = "";
		boolean[] result = new boolean[32];
		for (int i = 1; i <= 8; i++){
			everySix = splitToSix(in, i).clone();
			sub = getSBoxSub(everySix, i);
			tempResult = Integer.toBinaryString(sub);
			if(tempResult.length() == 3){
				preResult += "0" + tempResult;
			} else if (tempResult.length() == 2){
				preResult += "00" + tempResult;
			} else if (tempResult.length() == 1){
				preResult += "000" + tempResult;
			} else {
				preResult += tempResult;
			}
		}
		for (int j = 0; j < preResult.length(); j++){
			if(preResult.charAt(j) == '1')
				result[j]=true;
			else
				result[j]=false;
		}
		return result; //panjang result = 32bit
	}
	
	public static boolean[] splitToSix(boolean[] in, int level){ //level (1-8) = setiap 6bit dari 48bit
		boolean[] out = new boolean[6];
		int start = (level-1)*6;
		for (int i = 0; i < out.length; i++){
			out[i] = in[start];
			start++;
		}
		return out;
	}
	
	public static int getSBoxSub(boolean[] in, int sBoxNum){ //SBoxNum dimulai dari 1
		int first = in[0]? 1 : 0;
		int second = in[5]? 1 : 0;
		int row = 2*first + second;
		int col = 0;
		int result = 0;
		int power = 3;
		for (int i = 1; i <= 4; i++){
			boolean temp = in[i];
			if (temp){
				col += Math.pow(2, power);
			}
			power--;
		}
		
		int startSBox = (sBoxNum - 1) * 64;
		result = startSBox + (row * 16) + col;
		return SBox[result];
	}
	
	public static String toString(boolean[] a){
		String b="";
		for(int i=0; i < 64; i++){
			if(a[i]==true)
				b+="1";
			else
				b+="0";
		} return b;
	}
}
