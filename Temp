public class DES {
	final static int[] SBox = {
			14,  4, 13,  1,  2, 15, 11,  8,  3, 10,  6, 12,  5,  9,  0,  7, // S1
			 0, 15,  7,  4, 14,  2, 13,  1, 10,  6, 12, 11,  9,  5,  3,  8,
			 4,  1, 14,  8, 13,  6,  2, 11, 15, 12,  9,  7,  3, 10,  5,  0,
			15, 12,  8,  2,  4,  9,  1,  7,  5, 11,  3, 14, 10,  0,  6, 13,
			15,  1,  8, 14,  6, 11,  3,  4,  9,  7,  2, 13, 12,  0,  5, 10, // S2
			 3, 13,  4,  7, 15,  2,  8, 14, 12,  0,  1, 10,  6,  9, 11,  5,
			 0, 14,  7, 11, 10,  4, 13,  1,  5,  8, 12,  6,  9,  3,  2, 15,
			13,  8, 10,  1,  3, 15,  4,  2, 11,  6,  7, 12,  0,  5, 14,  9,
			10,  0,  9, 14,  6,  3, 15,  5,  1, 13, 12,  7, 11,  4,  2,  8, // S3
			13,  7,  0,  9,  3,  4,  6, 10,  2,  8,  5, 14, 12, 11, 15,  1,
			13,  6,  4,  9,  8, 15,  3,  0, 11,  1,  2, 12,  5, 10, 14,  7,
			 1, 10, 13,  0,  6,  9,  8,  7,  4, 15, 14,  3, 11,  5,  2, 12,
			 7, 13, 14,  3,  0,  6,  9, 10,  1,  2,  8,  5, 11, 12,  4, 15, // S4
			13,  8, 11,  5,  6, 15,  0,  3,  4,  7,  2, 12,  1, 10, 14,  9,
			10,  6,  9,  0, 12, 11,  7, 13, 15,  1,  3, 14,  5,  2,  8,  4,
			 3, 15,  0,  6, 10,  1, 13,  8,  9,  4,  5, 11, 12,  7,  2, 14,
			 2, 12,  4,  1,  7, 10, 11,  6,  8,  5,  3, 15, 13,  0, 14,  9, // S5
			14, 11,  2, 12,  4,  7, 13,  1,  5,  0, 15, 10,  3,  9,  8,  6,
			 4,  2,  1, 11, 10, 13,  7,  8, 15,  9, 12,  5,  6,  3,  0, 14,
			11,  8, 12,  7,  1, 14,  2, 13,  6, 15,  0,  9, 10,  4,  5,  3,
			12,  1, 10, 15,  9,  2,  6,  8,  0, 13,  3,  4, 14,  7,  5, 11, // S6
			10, 15,  4,  2,  7, 12,  9,  5,  6,  1, 13, 14,  0, 11,  3,  8,
			 9, 14, 15,  5,  2,  8, 12,  3,  7,  0,  4, 10,  1, 13, 11,  6,
			 4,  3,  2, 12,  9,  5, 15, 10, 11, 14,  1,  7,  6,  0,  8, 13,
			 4, 11,  2, 14, 15,  0,  8, 13,  3, 12,  9,  7,  5, 10,  6,  1, // S7
			13,  0, 11,  7,  4,  9,  1, 10, 14,  3,  5, 12,  2, 15,  8,  6,
			 1,  4, 11, 13, 12,  3,  7, 14, 10, 15,  6,  8,  0,  5,  9,  2,
			 6, 11, 13,  8,  1,  4, 10,  7,  9,  5,  0, 15, 14,  2,  3, 12,
			13,  2,  8,  4,  6, 15, 11,  1, 10,  9,  3, 14,  5,  0, 12,  7, // S8
			 1, 15, 13,  8, 10,  3,  7,  4, 12,  5,  6, 11,  0, 14,  9,  2,
			 7, 11,  4,  1,  9, 12, 14,  2,  0,  6, 10, 13, 15,  3,  5,  8,
			 2,  1, 14,  7,  4, 10,  8, 13, 15, 12,  9,  0,  3,  5,  6, 11
		};

	public static void main(String[] args) {		
		boolean[] in = {true, false, false, false, false, false};
		int trial = getSBoxSub(in, 1);
		System.out.println(trial);
		System.out.println(Integer.toBinaryString(trial));
		String a = "101011101101110010111010100110000111011001010101";
		System.out.println(a.length());
		boolean[] temp = new boolean[64];
		for (int i=0; i<a.length(); i++) {
			if(a.charAt(i) == '1')
				temp[i]=true;
			else
				temp[i]=false;
		}
		
		boolean[] coba = new boolean[32];
		coba = getSBoxSub(temp).clone();
		for (int j=0; j<coba.length; j++) {
			System.out.println(coba[j] + " ");
		}
		
	}
	
	public static boolean[] splitToSix(boolean[] in, int level){ //level adalah variabel yang menentukan 8 level bagian
		boolean[] out = new boolean[6];
		int start = (level-1)*6;
		for (int i = 0; i < out.length; i++){
			out[i] = in[start];
			start++;
		}
		return out;
	}
	
	public static int getSBoxSub(boolean[] in, int sBoxNum){
		int first = in[0]? 1 : 0;
		int second = in[5]? 1 : 0;
		int row = 2*first + second;
		int col = 0;
		int result = 0;
		int power = 3;
		for (int i = 1; i <= 4; i++){
			boolean temp = in[i];
			if (temp){
				col += Math.pow(2, power);
			}
			power--;
		}
		
		int startSBox = (sBoxNum - 1) * 64;
		result = startSBox + (row * 16) + col;
		return SBox[result];
		
	}
	
	public static String getBinaryString(int SBoxSub){
		return Integer.toBinaryString(SBoxSub);
	}
	
	public static boolean[] getSBoxSub(boolean[] in){ //panjang in = 48
		boolean[] everySix = new boolean[6];
		int sub = 0;
		String preResult = "";
		String tempResult = "";
		boolean[] result = new boolean[32];
		for (int i = 1; i <= 8; i++){
			everySix = splitToSix(in, i).clone();
			sub = getSBoxSub(everySix, i);
			tempResult = Integer.toBinaryString(sub);
			if(tempResult.length() == 3){
				preResult += "0" + tempResult;
			} else if (tempResult.length() == 2){
				preResult += "00" + tempResult;
			} else if (tempResult.length() == 1){
				preResult += "000" + tempResult;
			} else {
				preResult += tempResult;
			}
		}
		for (int j = 0; j < preResult.length(); j++){
			if(preResult.charAt(j) == '1')
				result[j]=true;
			else
				result[j]=false;
		}
		System.out.println(preResult);
		return result;
		
		
	}
}
