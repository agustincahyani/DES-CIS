import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Arrays;
import java.util.StringTokenizer;


public class tugas1 {
	
	public static void main(String[] args) throws IOException{
//		boolean t = true;
//		boolean u = false;
//		System.out.println(t ^ u);
		//boolean[] temp = new boolean[2];
		
		File file = new File("tes.txt");
		byte[] data = new byte[(int) file.length()];
		FileInputStream in = new FileInputStream(file);
		in.read(data);
		in.close();
		
		//read key
		BufferedReader rd = new BufferedReader(new FileReader ("key.txt"));
		StringTokenizer input = new StringTokenizer(rd.readLine(), "");
		int u = 0;
		boolean[] kunci = new boolean[64];
		while(input.hasMoreTokens()){
			kunci = key(kunci, input.nextToken(), u);
			u+=4;
		}
		
		boolean jalan = false;
		if(data.length >= 8){
			jalan = true;
		}
		
		while (jalan) {
			// jalanin des
		}
		
		int[] ip = {58, 50, 42, 34, 26, 18, 10, 2,
					60, 52, 44, 36, 28, 20, 12, 4,
					62, 54, 46, 38, 30, 22, 14, 6,
					64, 56, 48, 40, 32, 24, 16, 8,
					57, 49, 41, 33, 25, 17, 9, 1,
					59, 51, 43, 35, 27, 19, 11, 3,
					61, 53, 45, 37, 29, 21, 13, 5,
					63, 55, 47, 39, 31, 23, 15, 7};
		
		//initial permuatation
		boolean[] hasilIP = hasilTable(temp, ip);
		
		boolean[] rn = new boolean[32];
		boolean[] ln = new boolean[32];
		
		for (int i=0; i<32; i++) {
			ln[i] = hasilIP[i];
			rn[i] = hasilIP[i+32];
		}
		
		//key
		int[] pcol = {57, 49, 41, 33, 25, 17, 9,
						1, 58, 50, 42, 34, 26, 18,
						10, 2, 59, 51, 43, 35, 27,
						19, 11, 3, 60, 52, 44, 36};
		
		boolean[] pcoLeft = hasilTable(tempKey, pcol);
		
		
		int[] pcor = {63, 55, 47, 39, 31, 23, 15,
						7, 62, 54, 46, 38, 30, 22,
						14, 6, 61, 53, 45, 37, 29,
						21, 13, 5, 28, 20, 12, 4};
		
		boolean[] pcoRight = hasilTable(tempKey, pcor);
		
		int[] schedule = {1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1};
		
		int t = 0;
		
		while (t<16) {
		
			pcoLeft = hasilShift(pcoLeft, t);
			pcoRight = hasilShift(pcoRight, t);
			
			int[] pc2 = {14, 17, 11, 24, 1, 5, 3, 28,
						15, 6, 21, 10, 23, 19, 12, 4,
						26, 8, 16, 7, 27, 20, 13, 2,
						41, 52, 31, 37, 47, 55, 30, 40,
						51, 45, 33, 48, 44, 49, 39, 56,
						34, 53, 46, 42, 50, 36, 29, 32};
			
			boolean[] pct = new boolean[pcoLeft.length + pcoRight.length];
			
			System.arraycopy(pcoLeft, 0, pct, 0, pcoLeft.length);
			System.arraycopy(pcoRight, 0, pct, pcoLeft.length, pcoRight.length);
			
			pct = hasilTable(pct, pc2);
			
			int[] exp = {32, 1, 2, 3, 4, 5,
						4, 5, 6, 7, 8, 9,
						8, 9, 10, 11, 12, 13,
						12, 13, 14, 15, 16, 17,
						16, 17, 18, 19, 20, 21,
						20, 21, 22, 23, 24, 25,
						24, 25, 25, 27, 28, 29,
						28, 29, 30, 31, 32, 1};
			
			boolean[] hasilExp = hasilTable(rn, exp);
			
			hasilExp = hasilXor(hasilExp, pct);
			
			//permutation function, asumsikan udh subsitution
			
			boolean[] hasilSub = new boolean[32];
			
			int[] pf = {16, 7, 20, 21, 29, 12, 28, 17,
						1, 15, 23, 26, 5, 18, 31, 10,
						2, 8, 24, 14, 32, 27, 3, 9,
						19, 13, 30, 6, 22, 11, 4, 25};
			
			boolean[] hasilpf = hasilTable(hasilSub, pf);
			
			System.arraycopy(rn, 0, ln, 0, rn.length);
			rn = hasilXor(hasilpf, ln);//hasil xor
		
		}
		
		boolean[] fin = new boolean[64];
		
		System.arraycopy(rn, 0, fin, 0, rn.length);
		System.arraycopy(ln, 0, fin, rn.length, ln.length);
		
		int [] ipMin = {40, 8, 48, 16, 56, 24, 64, 32,
						39, 7, 47, 15, 55, 23, 63, 31,
						38, 6, 46, 14, 54, 22, 62, 30,
						37, 5, 45, 13, 53, 21, 61, 29,
						36, 4, 44, 12, 52, 20, 60, 28,
						35, 3, 43, 11, 51, 19, 59, 27,
						34, 2, 42, 10, 50, 18, 58, 26,
						33, 1, 41, 9, 49, 17, 57, 25};
		
		fin = hasilTable(fin, ipMin);//hasil akhir
		
		System.out.println("");
		for(int i=0; i < 64; i++){
			if(hasilIP[i]==true)
				System.out.print("1");
			else
				System.out.print("0");
		}
		
	}
	
	public static boolean[] hasilTable(boolean[] a, int[]b){
		boolean[] hasil = new boolean[b.length];
		for (int i=0; i<b.length; i++){
			hasil[i]=a[b[i]-1];
		}
		return hasil;
	}
	
	public static boolean[] hasilXor(boolean[]a, boolean[]b) {
		boolean[] temp = new boolean[a.length];
		for (int i=0; i<a.length; i++) {
			temp[i]= (a[i] ^ b[i]);
		} return temp;
	}
	
	public static boolean[] hasilShift(boolean[] a, int b) {
		boolean[] temp = new boolean[a.length];
		for(int i=0; i<a.length; i++){
			temp[i]=a[(i+b+a.length)%a.length];
		} return temp;
	}
	
	//asusmsikan array masukan 8
	public static boolean[] blok64(byte[] a){
		boolean[] b = new boolean[64];
		for(int i=0; i < 64; i++) {
			b[i] = (a[i/8] & (1 << (i/8))) == 0 ? true: false;
		} return b;
	}
	
	//buat convert key ke boolean[]
	public static boolean[] key(boolean[] a, String b, int c){
		switch(Character.toUpperCase(b.charAt(0))) {
			case '0':
		        a[c]=false; a[c+1]=false; a[c+2]=false; a[c+3]=false;
		        break;
		    case '1':
		    	 a[c]=false; a[c+1]=false; a[c+2]=false; a[c+3]=true;
		        break;
		    case '2':
		    	a[c]=false; a[c+1]=false; a[c+2]=true; a[c+3]=false;
		    	break;
		    case '3':
		    	a[c]=false; a[c+1]=false; a[c+2]=true; a[c+3]=true;
		    	break;
		    case '4':
		    	a[c]=false; a[c+1]=true; a[c+2]=false; a[c+3]=false;
		    	break;
		    case '5':
		    	a[c]=false; a[c+1]=true; a[c+2]=false; a[c+3]=true;
		    	break;
		    case '6':
		    	a[c]=false; a[c+1]=true; a[c+2]=true; a[c+3]=false;
		    	break;
		    case '7':
		    	a[c]=false; a[c+1]=true; a[c+2]=true; a[c+3]=true;
		    	break;
		    case '8':
		    	a[c]=true; a[c+1]=false; a[c+2]=false; a[c+3]=false;
		    	break;
		    case '9':
		    	a[c]=true; a[c+1]=false; a[c+2]=false; a[c+3]=true;
		    	break;
		    case 'A':
		    	a[c]=true; a[c+1]=false; a[c+2]=true; a[c+3]=false;
		    	break;
		    case 'B':
		    	a[c]=true; a[c+1]=false; a[c+2]=true; a[c+3]=true;
		    	break;
		    case 'C':
		    	a[c]=true; a[c+1]=true; a[c+2]=false; a[c+3]=false;
		    	break;
		    case 'D':
		    	a[c]=true; a[c+1]=true; a[c+2]=false; a[c+3]=true;
		    	break;
		    case 'E':
		    	a[c]=true; a[c+1]=true; a[c+2]=true; a[c+3]=false;
		    	break;
		    case 'F':
		    	a[c]=true; a[c+1]=true; a[c+2]=true; a[c+3]=true;
		    	break;
		    default:
		    	System.out.println("kunci salah");
		    	System.exit(0);
		} return a;
	}
}

//String a = "1010111011011100101110101001100001110110010101000011001000011111";
//boolean[] temp = new boolean[64];
//for (int i=0; i<64; i++) {
//	if(a.charAt(i) == '1')
//		temp[i]=true;
//	else
//		temp[i]=false;
//}
//
//String b = "1010000100100011010001010110011110001001101010111100110111101111";
//
//boolean[] tempKey = new boolean[64];
//
//for (int i=0; i<64; i++) {
//	if(b.charAt(i) == '1')
//		tempKey[i]=true;
//	else
//		tempKey[i]=false;
//}
